#!/usr/bin/env python3
"""
TESTE CR√çTICO: Valida√ß√£o do Fix de Verifica√ß√£o de Email
Verifica se o sistema de verifica√ß√£o est√° funcionando ap√≥s o fix na fun√ß√£o get_default_access_until()
"""
import sys
import os
sys.path.append('/app')

import django
from django.conf import settings
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
django.setup()

from core.models import get_default_access_until, TemporaryClimber
from core.services.climber_service import ClimberService
from django.utils import timezone
import traceback
import uuid

def test_verification_system():
    """Testa o sistema de verifica√ß√£o completo"""
    
    print('üö® TESTE CR√çTICO: Verifica√ß√£o de Email em Produ√ß√£o')
    print('=' * 60)
    print('Testando fix: timezone.datetime ‚Üí datetime na fun√ß√£o get_default_access_until()')
    print()
    
    test_passed = 0
    test_total = 0
    
    # Teste 1: Fun√ß√£o get_default_access_until
    test_total += 1
    try:
        print('1. Testando fun√ß√£o get_default_access_until()...')
        default_date = get_default_access_until()
        expected_date = "2025-11-11 23:59:59"
        
        print(f'   ‚úÖ Data padr√£o: {default_date}')
        print(f'   ‚úÖ Timezone: {default_date.tzinfo}')
        print(f'   ‚úÖ Data esperada: {expected_date}')
        
        if "2025-11-11" in str(default_date):
            print('   ‚úÖ PASSOU: Data correta (11/11/2025)')
            test_passed += 1
        else:
            print(f'   ‚ùå FALHOU: Data incorreta: {default_date}')
            
    except Exception as e:
        print(f'   ‚ùå ERRO na fun√ß√£o get_default_access_until: {str(e)}')
        print(f'   Traceback: {traceback.format_exc()}')
    
    # Teste 2: Cria√ß√£o de escalador
    test_total += 1
    escalador = None
    try:
        print('\n2. Testando cria√ß√£o de escalador tempor√°rio...')
        test_email = f'teste.fix.{uuid.uuid4().hex[:8]}@exemplo.com'
        
        escalador = ClimberService.register_climber(
            name='Teste Fix Verifica√ß√£o', 
            email=test_email, 
            phone='61999999999'
        )
        
        if escalador:
            print(f'   ‚úÖ Escalador criado: {escalador.name}')
            print(f'   ‚úÖ Email: {escalador.email}')
            print(f'   ‚úÖ Token: {escalador.email_token}')
            print(f'   ‚úÖ Acesso at√©: {escalador.access_until}')
            print(f'   ‚úÖ Email verificado: {escalador.email_verified}')
            
            # Verifica se a data est√° correta
            if "2025-11-11" in str(escalador.access_until):
                print('   ‚úÖ PASSOU: Data de acesso correta')
                test_passed += 1
            else:
                print(f'   ‚ùå FALHOU: Data de acesso incorreta: {escalador.access_until}')
        else:
            print('   ‚ùå FALHOU: N√£o foi poss√≠vel criar escalador')
            
    except Exception as e:
        print(f'   ‚ùå ERRO na cria√ß√£o do escalador: {str(e)}')
        print(f'   Traceback: {traceback.format_exc()}')
    
    # Teste 3: Verifica√ß√£o de email
    test_total += 1
    try:
        if escalador:
            print('\n3. Testando verifica√ß√£o de email...')
            token = str(escalador.email_token)
            
            escalador_verificado = ClimberService.verify_email(token)
            
            if escalador_verificado:
                print(f'   ‚úÖ Verifica√ß√£o OK: {escalador_verificado.email_verified}')
                print(f'   ‚úÖ Verificado em: {escalador_verificado.email_verified_at}')
                print('   ‚úÖ PASSOU: Sistema de verifica√ß√£o funcionando')
                test_passed += 1
            else:
                print('   ‚ùå FALHOU: Falha na verifica√ß√£o de email')
        else:
            print('\n3. ‚ùå PULADO: Teste de verifica√ß√£o (escalador n√£o criado)')
            
    except Exception as e:
        print(f'   ‚ùå ERRO na verifica√ß√£o: {str(e)}')
        print(f'   Traceback: {traceback.format_exc()}')
    
    # Limpeza
    try:
        if escalador:
            escalador.delete()
            print('\n   ‚úÖ Teste limpo da base de dados')
    except Exception as e:
        print(f'\n   ‚ö†Ô∏è Aviso: Erro na limpeza: {str(e)}')
    
    # Resultado final
    print('\n' + '=' * 60)
    print('üìä RESULTADO FINAL:')
    print(f'   ‚úÖ Testes passaram: {test_passed}/{test_total}')
    print(f'   üéØ Taxa de sucesso: {(test_passed/test_total)*100:.1f}%')
    
    if test_passed == test_total:
        print('\nüéâ SUCESSO: Sistema de verifica√ß√£o funcionando corretamente!')
        print('üöÄ Fix aplicado com sucesso - novos escaladores podem se verificar')
        return True
    else:
        print(f'\n‚ö†Ô∏è ATEN√á√ÉO: {test_total - test_passed} teste(s) falharam')
        print('üö® Verificar logs e aplicar corre√ß√µes adicionais se necess√°rio')
        return False

if __name__ == '__main__':
    success = test_verification_system()
    sys.exit(0 if success else 1)